#!/usr/bin/env node

// Test OpenAI Vision API with improved prompts
const path = require('path');
const fs = require('fs');

// Load environment variables
require('dotenv').config({ path: path.join(__dirname, '../apps/web/.env.local') });

const OpenAI = require('openai').default;

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

async function testVisionAPI() {
  console.log('üß™ Testing improved OpenAI Vision API...');
  
  // Create a simple test image with dive computer-like data
  const testImageBase64 = await createTestDiveComputerImage();
  
  const prompt = `You are an expert dive computer analyst. Your task is to READ the actual data displayed on this dive computer screen.

CRITICAL INSTRUCTIONS:
- ONLY extract data that is CLEARLY VISIBLE on the screen
- DO NOT make up, estimate, or generate hypothetical values
- If a value is not clearly readable, return null or "not_visible"
- Focus on ACTUAL NUMBERS and TEXT displayed on the device

EXTRACT ONLY VISIBLE DATA:
1. Max Depth (look for depth readings in meters or feet)
2. Dive Time (look for time displays in MM:SS or HH:MM:SS format)
3. Temperature (look for temp readings with ¬∞C or ¬∞F)

Return valid JSON:
{
  "extractedData": {
    "maxDepth": number_or_null,
    "diveTime": "MM:SS_or_null",
    "temperature": number_or_null,
    "visibility": "clear|blurry|dark|unreadable"
  },
  "confidence": "high|medium|low",
  "analysisNotes": "string describing what was actually visible"
}`;

  try {
    console.log('üì§ Sending to OpenAI Vision API...');
    
    const response = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        {
          role: "user",
          content: [
            { type: "text", text: prompt },
            {
              type: "image_url",
              image_url: {
                url: `data:image/jpeg;base64,${testImageBase64}`,
                detail: "high"
              }
            }
          ]
        }
      ],
      max_tokens: 500,
      temperature: 0.1
    });

    let analysisText = response.choices[0].message.content;
    
    // Clean up response
    if (analysisText.includes('```json')) {
      analysisText = analysisText.replace(/```json\s*/g, '').replace(/```\s*$/g, '');
    }
    
    console.log('üìù Raw OpenAI Response:');
    console.log(analysisText);
    console.log('');
    
    try {
      const parsed = JSON.parse(analysisText);
      console.log('‚úÖ Parsed JSON Response:');
      console.log(JSON.stringify(parsed, null, 2));
      
      if (parsed.extractedData && parsed.extractedData.maxDepth) {
        console.log('üéØ SUCCESS: OpenAI extracted actual depth data!');
      } else {
        console.log('‚ö†Ô∏è No depth data extracted - this is expected for a test image');
      }
      
    } catch (parseError) {
      console.log('‚ùå JSON parse failed:', parseError.message);
    }
    
  } catch (error) {
    console.error('‚ùå Vision API test failed:', error.message);
  }
}

async function createTestDiveComputerImage() {
  // For this test, we'll use a simple base64 encoded 1x1 pixel image
  // In a real test, you'd want to use an actual dive computer screenshot
  const pixelBuffer = Buffer.from([
    0xFF, 0xD8, 0xFF, 0xE0, 0x00, 0x10, 0x4A, 0x46, 0x49, 0x46, 0x00, 0x01, 0x01, 0x01, 0x00, 0x48,
    0x00, 0x48, 0x00, 0x00, 0xFF, 0xDB, 0x00, 0x43, 0x00, 0x08, 0x06, 0x06, 0x07, 0x06, 0x05, 0x08,
    0x07, 0x07, 0x07, 0x09, 0x09, 0x08, 0x0A, 0x0C, 0x14, 0x0D, 0x0C, 0x0B, 0x0B, 0x0C, 0x19, 0x12,
    0x13, 0x0F, 0x14, 0x1D, 0x1A, 0x1F, 0x1E, 0x1D, 0x1A, 0x1C, 0x1C, 0x20, 0x24, 0x2E, 0x27, 0x20,
    0x22, 0x2C, 0x23, 0x1C, 0x1C, 0x28, 0x37, 0x29, 0x2C, 0x30, 0x31, 0x34, 0x34, 0x34, 0x1F, 0x27,
    0x39, 0x3D, 0x38, 0x32, 0x3C, 0x2E, 0x33, 0x34, 0x32, 0xFF, 0xC0, 0x00, 0x11, 0x08, 0x00, 0x01,
    0x00, 0x01, 0x01, 0x01, 0x11, 0x00, 0x02, 0x11, 0x01, 0x03, 0x11, 0x01, 0xFF, 0xC4, 0x00, 0x1F,
    0x00, 0x00, 0x01, 0x05, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0xFF, 0xC4, 0x00,
    0xB5, 0x10, 0x00, 0x02, 0x01, 0x03, 0x03, 0x02, 0x04, 0x03, 0x05, 0x05, 0x04, 0x04, 0x00, 0x00,
    0x01, 0x7D, 0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12, 0x21, 0x31, 0x41, 0x06, 0x13, 0x51,
    0x61, 0x07, 0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xA1, 0x08, 0x23, 0x42, 0xB1, 0xC1, 0x15, 0x52,
    0xD1, 0xF0, 0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0A, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x25, 0x26,
    0x27, 0x28, 0x29, 0x2A, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x43, 0x44, 0x45, 0x46, 0x47,
    0x48, 0x49, 0x4A, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x63, 0x64, 0x65, 0x66, 0x67,
    0x68, 0x69, 0x6A, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x83, 0x84, 0x85, 0x86, 0x87,
    0x88, 0x89, 0x8A, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0xA2, 0xA3, 0xA4, 0xA5,
    0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xC2, 0xC3,
    0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA,
    0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6,
    0xF7, 0xF8, 0xF9, 0xFA, 0xFF, 0xDA, 0x00, 0x0C, 0x03, 0x01, 0x00, 0x02, 0x11, 0x03, 0x11, 0x00,
    0x3F, 0x00, 0xF2, 0x8A, 0x28, 0xAF, 0xC3, 0x0F, 0xD9, 0xFF, 0xD9
  ]);
  
  return pixelBuffer.toString('base64');
}

if (require.main === module) {
  testVisionAPI().catch(console.error);
}
