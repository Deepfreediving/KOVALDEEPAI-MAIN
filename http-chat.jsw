// ===== üìÑ http-chat.jsw - CHAT ENDPOINT =====
// Forward chat requests from Wix frontend to your deployed AI backend

import wixData from 'wix-data';
import { fetch } from 'wix-fetch';

// ‚úÖ Configuration
const AI_BACKEND_URL = "https://kovaldeepai-main.vercel.app/api/chat-embed";

/**
 * ‚úÖ Forward chat requests from Wix frontend to your deployed AI backend
 */
export async function post_chat(request) {
    try {
        const { userMessage, userId, profile = {}, diveLogs = [] } = request.body;

        // ‚úÖ Validate required inputs
        if (!userMessage?.trim()) {
            return {
                status: 400,
                body: {
                    error: 'Message is required',
                    success: false
                },
                headers: {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                }
            };
        }

        // ‚úÖ Retrieve dive logs if not provided
        let userDiveLogs = diveLogs;
        if (!userDiveLogs.length && userId) {
            try {
                const results = await wixData.query("@deepfreediving/kovaldeepai-app/Import1")
                    .eq("userId", userId)
                    .and(wixData.query("@deepfreediving/kovaldeepai-app/Import1")
                        .or(
                            wixData.query("@deepfreediving/kovaldeepai-app/Import1").isNotEmpty("discipline"),
                            wixData.query("@deepfreediving/kovaldeepai-app/Import1").isNotEmpty("targetDepth")
                        )
                    )
                    .descending("timestamp")
                    .limit(10)
                    .find();
                    
                userDiveLogs = results.items;
            } catch (diveLogError) {
                console.warn("‚ö†Ô∏è Could not load dive logs:", diveLogError);
                userDiveLogs = [];
            }
        }

        // ‚úÖ Build profile context for AI
        const userProfile = {
            ...profile,
            totalDives: userDiveLogs.length,
            pb: userDiveLogs.reduce(
                (max, d) => Math.max(max, d.reachedDepth || d.targetDepth || 0),
                0
            ),
            lastDiveDepth: userDiveLogs[0]?.reachedDepth || userDiveLogs[0]?.targetDepth || 0,
            lastDiveLocation: userDiveLogs[0]?.location || "Unknown"
        };

        // ‚úÖ Send query to Next.js AI backend
        const payload = {
            message: userMessage,  // ‚úÖ Use 'message' for Next.js backend
            userId: userId || 'guest',
            profile: userProfile
        };

        console.log("üöÄ Sending to AI backend:", payload);

        const response = await fetch(AI_BACKEND_URL, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(payload)
        });

        if (!response.ok) {
            console.error(`‚ùå AI backend responded with status: ${response.status}`);
            return {
                status: response.status,
                body: {
                    error: `AI backend error: ${response.status}`,
                    success: false
                },
                headers: {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                }
            };
        }

        const data = await response.json();
        console.log("üì• AI backend response:", data);

        // ‚úÖ Handle the correct response structure from chat-embed.ts
        const aiResponse = data.assistantMessage?.content || 
                          data.answer || 
                          "‚ö†Ô∏è No response from AI.";

        return {
            status: 200,
            body: {
                aiResponse,
                metadata: {
                    ...data.metadata,
                    userProfile,
                    totalDiveLogs: userDiveLogs.length
                },
                success: true,
                timestamp: new Date().toISOString()
            },
            headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type, Authorization'
            }
        };

    } catch (error) {
        console.error("‚ùå Chat function error:", error);
        return {
            status: 500,
            body: {
                error: 'Chat service error: ' + error.message,
                success: false,
                timestamp: new Date().toISOString()
            },
            headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            }
        };
    }
}

/**
 * ‚úÖ Handle OPTIONS requests for CORS
 */
export function options_chat(request) {
    return {
        status: 200,
        headers: {
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Methods': 'POST, OPTIONS',
            'Access-Control-Allow-Headers': 'Content-Type, Authorization'
        }
    };
}
