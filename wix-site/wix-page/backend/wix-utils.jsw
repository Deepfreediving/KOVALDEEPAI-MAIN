// ðŸ”¥ WIX UTILITIES - SIMPLIFIED FOR PAID MEMBERS
// Version: 5.0.0 - Simplified Edition
// Date: August 14, 2025

import wixData from 'wix-data';

// ðŸŽ¯ SIMPLIFIED CONFIGURATION
const WIX_CONFIG = {
  COLLECTIONS: {
    MEMBERS: 'Members/FullData',
    DIVE_LOGS: 'DiveLogs'
  },
  
  QUERY_LIMITS: {
    MAX_RESULTS: 100,         // Wix recommended maximum
    DEFAULT_PAGE_SIZE: 25,    // Optimal page size for UI
    RECENT_ITEMS: 50         // For recent activity
  },
  
  PERFORMANCE: {
    SLOW_QUERY_THRESHOLD: 1000,    // ms
    ENABLE_LOGGING: true
  }
};

// ðŸ”¥ DIVE LOGS FIELD MAPPING - ALIGNED WITH WIX DATABASE
const DIVE_LOG_FIELDS = {
  USER_ID: 'userId',           // User ID field
  DIVE_LOG_ID: 'diveLogId',    // Dive Log ID field  
  LOG_ENTRY: 'logEntry',       // Log Entry field (JSON string)
  DIVE_DATE: 'diveDate',       // Dive Date field
  DIVE_TIME: 'diveTime',       // Dive Time field
  WATCH_PHOTO: 'watchedPhoto'  // Dive Log Watch Photo field
};

// ðŸ”¥ SIMPLIFIED CORS HEADERS
const CORS_HEADERS = {
  'Content-Type': 'application/json',
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
  'Access-Control-Allow-Headers': 'Content-Type, Authorization'
};

/**
 * ðŸš€ SIMPLIFIED WIX UTILITIES FOR PAID MEMBERS
 */

/**
 * Get user dive logs - SIMPLIFIED
 */
async function getUserDiveLogs(userId, options = {}) {
  const {
    limit = WIX_CONFIG.QUERY_LIMITS.DEFAULT_PAGE_SIZE,
    includeDetails = false
  } = options;

  if (!userId) {
    throw new Error('userId is required');
  }

  try {
    const results = await wixData.query(WIX_CONFIG.COLLECTIONS.DIVE_LOGS)
      .eq(DIVE_LOG_FIELDS.USER_ID, userId)
      .descending(DIVE_LOG_FIELDS.DIVE_DATE)
      .limit(limit)
      .find();

    // Process the results
    const processedItems = results.items.map(item => {
      let parsedLogEntry = {};
      try {
        parsedLogEntry = JSON.parse(item[DIVE_LOG_FIELDS.LOG_ENTRY] || '{}');
      } catch (e) {
        parsedLogEntry = { error: 'Invalid logEntry format' };
      }

      const processed = {
        _id: item._id,
        userId: item[DIVE_LOG_FIELDS.USER_ID],
        diveLogId: item[DIVE_LOG_FIELDS.DIVE_LOG_ID],
        diveDate: item[DIVE_LOG_FIELDS.DIVE_DATE],
        diveTime: item[DIVE_LOG_FIELDS.DIVE_TIME],
        watchedPhoto: item[DIVE_LOG_FIELDS.WATCH_PHOTO],
        discipline: parsedLogEntry.dive?.discipline || parsedLogEntry.discipline || 'Unknown',
        reachedDepth: parsedLogEntry.dive?.depths?.reached || parsedLogEntry.reachedDepth || 0,
        targetDepth: parsedLogEntry.dive?.depths?.target || parsedLogEntry.targetDepth || 0,
        location: parsedLogEntry.dive?.location || parsedLogEntry.location || 'Unknown',
        notes: parsedLogEntry.dive?.notes || parsedLogEntry.notes || '',
        _createdDate: item._createdDate
      };

      if (includeDetails) {
        processed.logEntry = parsedLogEntry;
      }

      return processed;
    });

    return {
      success: true,
      items: processedItems,
      totalCount: results.totalCount || processedItems.length,
      userId: userId
    };

  } catch (error) {
    console.error('Failed to get user dive logs:', error);
    throw error;
  }
}

/**
 * Get user profile - SIMPLIFIED
 */
async function getUserProfile(userId) {
  if (!userId) {
    throw new Error('userId is required');
  }

  try {
    const result = await wixData.query(WIX_CONFIG.COLLECTIONS.MEMBERS)
      .eq('_id', userId)
      .limit(1)
      .find();

    if (result.items.length === 0) {
      throw new Error('User profile not found');
    }

    const member = result.items[0];
    
    return {
      success: true,
      profile: {
        userId: member._id,
        email: member.loginEmail || '',
        displayName: member.nickname || member.firstName || 'User',
        firstName: member.firstName || '',
        lastName: member.lastName || '',
        profilePicture: member.profilePhoto?.url || '',
        phone: Array.isArray(member.phones) && member.phones.length > 0 ? 
               member.phones[0].phone : '',
        bio: member.about || '',
        location: Array.isArray(member.addresses) && member.addresses.length > 0 ? 
                  `${member.addresses[0].city || ''}, ${member.addresses[0].country || ''}`.trim() : '',
        lastLoginDate: member.lastLoginDate,
        registrationDate: member._createdDate,
        source: 'wix-members'
      }
    };

  } catch (error) {
    console.error('Failed to get user profile:', error);
    throw error;
  }
}

/**
 * Save dive log data - SIMPLIFIED
 */
async function saveDiveLog(userId, diveLogData) {
  if (!userId || !diveLogData) {
    throw new Error('userId and diveLogData are required');
  }

  try {
    const timestamp = new Date().toISOString();
    const diveLogId = `dive_${userId}_${Date.now()}`;
    
    // Create the record using correct field names
    const diveLogRecord = {
      [DIVE_LOG_FIELDS.USER_ID]: userId,
      [DIVE_LOG_FIELDS.DIVE_LOG_ID]: diveLogId,
      [DIVE_LOG_FIELDS.LOG_ENTRY]: JSON.stringify(diveLogData),
      [DIVE_LOG_FIELDS.DIVE_DATE]: diveLogData.date ? new Date(diveLogData.date) : new Date(),
      [DIVE_LOG_FIELDS.DIVE_TIME]: diveLogData.time || new Date().toLocaleTimeString(),
      [DIVE_LOG_FIELDS.WATCH_PHOTO]: diveLogData.watchPhoto || null
    };

    const result = await wixData.insert(WIX_CONFIG.COLLECTIONS.DIVE_LOGS, diveLogRecord);
    
    return {
      success: true,
      _id: result._id,
      diveLogId: diveLogId,
      userId: userId,
      timestamp: timestamp
    };

  } catch (error) {
    console.error('Failed to save dive log:', error);
    throw error;
  }
}

/**
 * Create response helper
 */
function createResponse(status, data) {
  return {
    status,
    headers: CORS_HEADERS,
    body: data
  };
}

console.log("ðŸ”¥ Simplified Wix Utilities initialized");

// Export simplified functions
export {
  WIX_CONFIG,
  DIVE_LOG_FIELDS,
  CORS_HEADERS,
  getUserDiveLogs,
  getUserProfile,
  saveDiveLog,
  createResponse
};
