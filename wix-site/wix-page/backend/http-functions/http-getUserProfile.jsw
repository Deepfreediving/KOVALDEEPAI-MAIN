// 🔥 HTTP-GETUSERPROFILE.JSW - SIMPLIFIED USER PROFILE API
// Version: 5.0.0 - Simplified Edition (All Paid Members)
// Date: August 14, 2025

import { ok, badRequest, serverError, notFound } from 'wix-http-functions';
import wixData from 'wix-data';

// 🎯 SIMPLIFIED CONFIGURATION
const PROFILE_CONFIG = {
  COLLECTIONS: {
    MEMBERS: 'Members/FullData',
    USER_DATA: 'DiveLogs'
  },
  
  PERFORMANCE: {
    SLOW_QUERY_THRESHOLD: 1500,
    ENABLE_ANALYTICS: true
  }
};

// 🔥 SIMPLIFIED PERFORMANCE METRICS
let profileMetrics = {
  requests: 0,
  totalDuration: 0,
  errors: 0
};

// 🔥 CORS Headers
const CORS_HEADERS = {
  'Content-Type': 'application/json',
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
  'Access-Control-Allow-Headers': 'Content-Type, Authorization'
};

/**
 * 🚀 SIMPLIFIED USER PROFILE HTTP FUNCTION
 * Single implementation for all paid members
 */
export async function get_getUserProfile(request) {
  const startTime = Date.now();
  
  try {
    const { userId, includeStats = 'false', includeData = 'false' } = request.query;
    
    if (!userId) {
      return badRequest({
        headers: CORS_HEADERS,
        body: { 
          success: false,
          error: 'userId is required' 
        }
      });
    }
    
    // Get member profile
    const memberResult = await wixData.query(PROFILE_CONFIG.COLLECTIONS.MEMBERS)
      .eq('_id', userId)
      .limit(1)
      .find();
    
    if (memberResult.items.length === 0) {
      return notFound({
        headers: CORS_HEADERS,
        body: { 
          success: false,
          error: 'User profile not found', 
          userId 
        }
      });
    }
    
    const member = memberResult.items[0];
    const profile = mapMemberFields(member);
    
    // Build response
    const response = {
      success: true,
      profile,
      metadata: {
        lastUpdated: member._updatedDate || member._createdDate,
        source: 'wix-members',
        fields: Object.keys(profile)
      }
    };
    
    // Include user statistics if requested
    if (includeStats === 'true') {
      response.stats = await getUserStats(userId);
    }
    
    // Include user data summary if requested
    if (includeData === 'true') {
      response.dataSummary = await getUserDataSummary(userId);
    }
    
    // Track performance
    const duration = Date.now() - startTime;
    updateProfileMetrics(duration, 'success');
    
    return ok({
      headers: CORS_HEADERS,
      body: response
    });
    
  } catch (error) {
    const duration = Date.now() - startTime;
    updateProfileMetrics(duration, 'error');
    
    console.error('❌ User Profile API Error:', {
      error: error.message,
      duration,
      userId: request.query?.userId,
      path: request.path
    });
    
    return serverError({
      headers: CORS_HEADERS,
      body: {
        success: false,
        error: 'Failed to retrieve user profile',
        message: error.message,
        duration
      }
    });
  }
}

/**
 * OPTIONS: Handle preflight requests
 */
export function options_getUserProfile(request) {
  return ok({
    headers: CORS_HEADERS,
    body: {}
  });
}

// ===== 🛠️ UTILITY FUNCTIONS =====

/**
 * Map Wix member fields to standardized profile format
 */
function mapMemberFields(member) {
  return {
    userId: member._id,
    email: member.loginEmail || '',
    displayName: member.nickname || member.firstName || 'User',
    firstName: member.firstName || '',
    lastName: member.lastName || '',
    profilePicture: member.profilePhoto?.url || '',
    phone: Array.isArray(member.phones) && member.phones.length > 0 ? 
           member.phones[0].phone : '',
    bio: member.about || '',
    location: Array.isArray(member.addresses) && member.addresses.length > 0 ? 
              `${member.addresses[0].city || ''}, ${member.addresses[0].country || ''}`.trim() : '',
    lastLoginDate: member.lastLoginDate,
    registrationDate: member._createdDate,
    source: 'wix-members'
  };
}

/**
 * Get user statistics
 */
async function getUserStats(userId) {
  try {
    const diveLogResult = await wixData.query(PROFILE_CONFIG.COLLECTIONS.USER_DATA)
      .eq('userId', userId)
      .count();
    
    return {
      totalDiveLogs: diveLogResult,
      totalEntries: diveLogResult
    };
  } catch (error) {
    console.warn('Failed to get user stats:', error);
    return {
      totalDiveLogs: 0,
      totalEntries: 0,
      error: 'Stats unavailable'
    };
  }
}

/**
 * Get user data summary
 */
async function getUserDataSummary(userId) {
  try {
    const recentData = await wixData.query(PROFILE_CONFIG.COLLECTIONS.USER_DATA)
      .eq('userId', userId)
      .descending('_createdDate')
      .limit(10)
      .find();
    
    return {
      recentEntries: recentData.items.length,
      lastActivity: recentData.items.length > 0 ? recentData.items[0]._createdDate : null,
      disciplines: [...new Set(recentData.items.map(item => item.discipline).filter(Boolean))]
    };
  } catch (error) {
    console.warn('Failed to get user data summary:', error);
    return {
      recentEntries: 0,
      lastActivity: null,
      disciplines: [],
      error: 'Summary unavailable'
    };
  }
}

/**
 * Update performance metrics - SIMPLIFIED
 */
function updateProfileMetrics(duration, status) {
  profileMetrics.requests++;
  profileMetrics.totalDuration += duration;
  
  if (status === 'error') {
    profileMetrics.errors++;
  }
}

// 🔄 GET METRICS ENDPOINT
export async function get_userProfileMetrics(request) {
  const avgDuration = profileMetrics.requests > 0 ? 
    Math.round(profileMetrics.totalDuration / profileMetrics.requests) : 0;
  
  return ok({
    headers: CORS_HEADERS,
    body: {
      metrics: {
        ...profileMetrics,
        averageDuration: avgDuration,
        successRate: Math.round(((profileMetrics.requests - profileMetrics.errors) / profileMetrics.requests) * 100) || 100
      },
      timestamp: new Date().toISOString()
    }
  });
}

console.log("🔥 Simplified User Profile API initialized");

// Export main function
export { get_getUserProfile as default };
