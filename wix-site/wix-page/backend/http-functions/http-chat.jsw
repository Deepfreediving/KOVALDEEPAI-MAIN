// HTTP-CHAT.JSW - WIX BACKEND CHAT API
// Version: 5.0.0 - TRULY SIMPLIFIED for Wix Collections Only
// üöÄ REMOVED: External API calls, complex fallbacks, semantic search

import wixData from 'wix-data';
import { currentMember } from 'wix-members';
import { ok, badRequest, serverError } from 'wix-http-functions';

// üöÄ SIMPLIFIED: Chat configuration for Wix collections only
const CHAT_CONFIG = {
  DIVELOGS_COLLECTION: 'DiveLogs',
  USER_MEMORY_COLLECTION: 'UserMemory',
  
  VALIDATION: {
    MAX_MESSAGE_LENGTH: 2000,
    MIN_MESSAGE_LENGTH: 1
  },
  
  PERFORMANCE: {
    SLOW_QUERY_THRESHOLD: 2000
  }
};

// üöÄ SIMPLIFIED: Basic CORS headers
const CORS_HEADERS = {
  'Content-Type': 'application/json',
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Methods': 'POST, OPTIONS',
  'Access-Control-Allow-Headers': 'Content-Type'
};

// üöÄ SIMPLIFIED: Basic performance tracking
let chatMetrics = {
  requests: 0,
  responses: 0,
  errors: 0,
  totalDuration: 0
};

// üöÄ SIMPLIFIED: Utility Functions
function createResponse(status, data) {
  return {
    status,
    body: data,
    headers: CORS_HEADERS
  };
}

function trackMetrics(duration, success = true) {
  chatMetrics.requests++;
  chatMetrics.totalDuration += duration;
  if (success) {
    chatMetrics.responses++;
  } else {
    chatMetrics.errors++;
  }
}

function getApiVersion(request) {
  return request.headers['x-api-version'] || 
         request.query.version || 
         '5.0.0'; // Default version
}

// üöÄ SIMPLIFIED: Get real member ID if possible
async function getMemberUserId(providedUserId) {
  try {
    // If we have a real member ID already, use it
    if (providedUserId && !providedUserId.startsWith('guest-') && !providedUserId.startsWith('session-')) {
      return providedUserId;
    }
    
    // Try to get actual member from Wix
    const member = await currentMember.getMember();
    if (member && member._id) {
      console.log("‚úÖ Found real Wix member ID:", member._id);
      return member._id;
    }
    
    // Fallback to provided ID
    return providedUserId || 'guest';
  } catch (error) {
    console.log("‚ö†Ô∏è Member detection failed:", error.message);
    return providedUserId || 'guest';
  }
}

// üöÄ SIMPLIFIED: Get dive logs from Wix collection
async function getDiveLogs(userId) {
  try {
    console.log("üîç Querying DiveLogs collection for user:", userId);
    
    const results = await wixData.query(CHAT_CONFIG.DIVELOGS_COLLECTION)
      .eq('userId', userId)
      .descending('_createdDate')
      .limit(10)
      .find();
    
    console.log("‚úÖ Found", results.items.length, "dive logs");
    return results.items;
  } catch (error) {
    console.error("‚ùå Error querying dive logs:", error);
    return [];
  }
}

// ÔøΩ SIMPLIFIED: Main chat endpoint - just stores chat data in Wix
export async function post_chat(request) {
  const startTime = Date.now();
  
  try {
    console.log("ÔøΩ Chat request received");
    const requestData = await request.body.json();
    const { userMessage, userId, profile = {} } = requestData;
    
    // Basic validation
    if (!userMessage?.trim()) {
      return createResponse(400, {
        error: 'Message is required',
        success: false
      });
    }
    
    if (userMessage.length > CHAT_CONFIG.VALIDATION.MAX_MESSAGE_LENGTH) {
      return createResponse(400, {
        error: 'Message too long',
        success: false
      });
    }
    
    // Get real member ID
    const realUserId = await getMemberUserId(userId);
    console.log("ÔøΩ Processing chat for user:", realUserId);
    
    // Get user's dive logs from Wix collection
    const userDiveLogs = await getDiveLogs(realUserId);
    
    // üöÄ SIMPLIFIED: Just return the data for the frontend to handle
    // No external AI API calls - let the main app handle AI processing
    const duration = Date.now() - startTime;
    trackMetrics(duration, true);
    
    const response = {
      success: true,
      data: {
        userId: realUserId,
        message: userMessage,
        diveLogs: userDiveLogs,
        profile: profile,
        timestamp: new Date().toISOString()
      },
      // Indicate that this is just data forwarding, not AI processing
      forwardToMainApp: true,
      performance: {
        duration: `${duration}ms`,
        diveLogsFound: userDiveLogs.length
      }
    };
    
    console.log("‚úÖ Chat data prepared for forwarding to main app");
    return createResponse(200, response);
    
  } catch (error) {
    const duration = Date.now() - startTime;
    trackMetrics(duration, false);
    
    console.error("‚ùå Chat function error:", error);
    return createResponse(500, {
      error: 'Chat service error: ' + error.message,
      success: false
    });
  }
}

/**
 * GET: Retrieve chat metrics (master level)
 */
export async function get_chatMetrics(request) {
  const version = getApiVersion(request);
  
  return createResponse(200, {
    success: true,
    metrics: chatMetrics,
    config: CHAT_CONFIG,
    version: version
  });
}

/**
 * OPTIONS: Handle CORS preflight requests
 */
export function options_chat(request) {
  return createResponse(200, {}, request);
}

// üî• BACKWARD COMPATIBILITY LAYER
// Legacy function names for existing integrations
export const forwardChatRequest = post_chat;
export const handleChatRequest = post_chat;

console.log("üî• Chat Master API initialized - All versions supported");
