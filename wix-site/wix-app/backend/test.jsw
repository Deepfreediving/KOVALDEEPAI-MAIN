// üî• WIX APP BACKEND: HTTP-TEST.JSW - MASTER TEST SUITE
// Comprehensive testing endpoint with full system diagnostics
// Version: 4.x - Updated for Wix App Integration (Auto-versioning)
// Date: August 10, 2025

import { ok, badRequest, serverError } from 'wix-http-functions';
import { fetch } from 'wix-fetch';
import wixData from 'wix-data';
import { authentication } from 'wix-members-backend';

// üéØ MASTER TEST CONFIGURATION FOR WIX APP
const TEST_CONFIG = {
  APP_ID: '@deepfreediving/kovaldeepai-app',
  VERSION: '4.x',
  TEST_USER_ID: '2ac69a3d-1838-4a13-b118-4712b45d1b41',
  
  SERVICES: {
    VERCEL_APP: 'https://kovaldeepai-main.vercel.app',
    HEALTH_CHECK: 'https://kovaldeepai-main.vercel.app/api/health'
  },
  
  COLLECTIONS: ['UserMemory', 'MemberProfiles', 'DiveLogs'],
  
  CORS_HEADERS: {
    'Content-Type': 'application/json',
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
    'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Wix-App-ID',
    'X-Wix-App-ID': '@deepfreediving/kovaldeepai-app'
  }
};

// üî• ENHANCED HELPER FUNCTION FOR CONSISTENT RESPONSES
function createResponse(status, data) {
  return {
    status,
    body: {
      ...data,
      appId: TEST_CONFIG.APP_ID,
      version: TEST_CONFIG.VERSION
    },
    headers: TEST_CONFIG.CORS_HEADERS
  };
}

// üî• ENHANCED GET TEST - Quick System Status
export async function get_test(request) {
  const startTime = Date.now();
  
  try {
    const version = request.query.version || 'basic';
    const includeAI = request.query.includeAI === 'true';
    
    const testResult = {
      status: 'operational',
      timestamp: new Date().toISOString(),
      environment: 'wix-backend',
      appId: TEST_CONFIG.APP_ID,
      version: TEST_CONFIG.VERSION,
      requestedVersion: version,
      wixServices: {
        httpFunctions: 'available',
        dataQueries: 'ready',
        authentication: 'ready'
      }
    };
    
    // Enhanced testing for expert/optimized versions
    if (includeAI && version !== 'basic') {
      try {
        const healthResponse = await fetch(TEST_CONFIG.SERVICES.HEALTH_CHECK, {
          method: 'GET',
          headers: { 'Content-Type': 'application/json' }
        });
        
        testResult.aiIntegration = {
          vercelApp: healthResponse.ok ? 'operational' : 'degraded',
          openaiReady: healthResponse.ok,
          pineconeReady: healthResponse.ok,
          statusCode: healthResponse.status
        };
      } catch (aiError) {
        testResult.aiIntegration = {
          vercelApp: 'error',
          openaiReady: false,
          pineconeReady: false,
          error: aiError.message
        };
      }
    }
    
    const duration = Date.now() - startTime;
    testResult.performance = {
      responseTime: `${duration}ms`,
      efficient: duration < 1000
    };
    
    return createResponse(200, {
      success: true,
      ...testResult,
      message: 'Wix backend test successful'
    });
    
  } catch (error) {
    return createResponse(500, {
      success: false,
      status: 'error',
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
}

// üî• POST TEST - Enhanced with Payload Testing
export async function post_test(request) {
  const startTime = Date.now();
  
  try {
    const requestData = await request.body.json();
    const { testType = 'basic', data } = requestData;
    
    const testResult = {
      success: true,
      status: 'operational',
      testType: testType,
      timestamp: new Date().toISOString(),
      dataReceived: !!data,
      payloadSize: JSON.stringify(requestData).length
    };
    
    // Enhanced payload testing
    if (data) {
      testResult.dataValidation = {
        hasUserId: !!data.userId,
        hasMessage: !!data.message,
        hasProfile: !!data.profile,
        payloadValid: true
      };
    }
    
    const duration = Date.now() - startTime;
    testResult.performance = {
      responseTime: `${duration}ms`,
      efficient: duration < 500
    };
    
    return createResponse(200, {
      ...testResult,
      message: 'POST test successful'
    });
    
  } catch (error) {
    return createResponse(500, {
      success: false,
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
}

// üî• OPTIONS - CORS Support
export function options_test(request) {
  return createResponse(200, {
    message: 'CORS preflight successful',
    supportedMethods: ['GET', 'POST', 'OPTIONS'],
    testCapabilities: ['basic-connectivity', 'ai-integration', 'payload-validation']
  });
}

// üî• WRAPPER FUNCTIONS FOR DIRECT BACKEND CALLS
// These functions are called directly by the frontend using backend.test() etc.
export async function test(requestData) {
  // Create a mock request object that matches the HTTP function signature
  const mockRequest = {
    body: {
      json: () => Promise.resolve(requestData)
    },
    headers: {},
    query: {},
    method: 'POST'
  };
  
  // Call the main HTTP function and extract the response body
  const result = await post_test(mockRequest);
  return result.body || result;
}

// Wrapper for GET operations
export async function getTest(requestData) {
  const mockRequest = {
    body: { json: () => Promise.resolve({}) },
    headers: {},
    query: requestData || {},
    method: 'GET'
  };
  
  const result = await get_test(mockRequest);
  return result.body || result;
}

console.log("üî• Master Test Suite initialized - Full system diagnostics ready");

// üî• HEALTH CHECK ENDPOINT - Quick System Status
export async function get_healthCheck(request) {
  console.log('üè• Health check requested');
  
  try {
    const healthData = {
      timestamp: new Date().toISOString(),
      status: 'healthy',
      backend: 'wix-blocks-app',
      testUserId: TEST_CONFIG.TEST_USER_ID,
      functions: {
        healthCheck: 'working',
        wixData: 'available',
        authentication: 'available',
        fetch: 'available'
      },
      message: 'Master test suite is operational!'
    };
    
    return ok(healthData, TEST_CONFIG.CORS_HEADERS);
    
  } catch (error) {
    return serverError({
      error: 'Health check failed',
      details: error.message,
      timestamp: new Date().toISOString()
    }, TEST_CONFIG.CORS_HEADERS);
  }
}

// üî• COMPREHENSIVE USER TESTING
export async function get_testUser(request) {
  const userId = request.query.userId || TEST_CONFIG.TEST_USER_ID;
  console.log(`üë§ Testing user: ${userId}`);
  
  try {
    const testResults = {
      userId: userId,
      timestamp: new Date().toISOString(),
      tests: {}
    };
    
    // Test authentication
    try {
      const member = await authentication.getCurrentMember();
      testResults.tests.authentication = {
        status: 'PASS',
        hasMember: !!member,
        memberId: member?.id || 'No authenticated member'
      };
    } catch (error) {
      testResults.tests.authentication = {
        status: 'FAIL',
        error: error.message
      };
    }
    
    // Test collections (basic check without modifying data)
    testResults.tests.collections = {};
    
    for (const collectionName of TEST_CONFIG.COLLECTIONS) {
      try {
        const result = await wixData.query(collectionName).limit(1).find();
        testResults.tests.collections[collectionName] = {
          status: 'PASS',
          exists: true,
          totalItems: result.totalCount || 0
        };
      } catch (error) {
        testResults.tests.collections[collectionName] = {
          status: 'FAIL',
          exists: false,
          error: error.message
        };
      }
    }
    
    return ok({
      success: true,
      message: `Comprehensive user test completed for ${userId}`,
      ...testResults
    }, TEST_CONFIG.CORS_HEADERS);
    
  } catch (error) {
    return serverError({
      error: 'User test failed',
      userId: userId,
      details: error.message,
      timestamp: new Date().toISOString()
    }, TEST_CONFIG.CORS_HEADERS);
  }
}

// üî• DEBUG ALL FUNCTIONS - Master Diagnostic
export async function get_debugAllFunctions(request) {
  console.log('üöÄ DEBUG: Starting comprehensive system test...');
  
  try {
    const results = {
      timestamp: new Date().toISOString(),
      backend: 'wix-blocks-app',
      version: '5.0.0',
      testSummary: {
        healthCheck: 'PASS',
        cors: 'PASS',
        authentication: 'TESTING',
        collections: 'TESTING',
        aiIntegration: 'TESTING'
      },
      message: 'Master test suite: All systems check initiated'
    };
    
    // Test authentication
    try {
      const member = await authentication.getCurrentMember();
      results.testSummary.authentication = 'PASS';
      results.currentMember = {
        exists: !!member,
        id: member?.id || null
      };
    } catch (error) {
      results.testSummary.authentication = 'FAIL';
      results.authError = error.message;
    }
    
    // Test basic collection access
    try {
      const userMemoryTest = await wixData.query('UserMemory').limit(1).find();
      results.testSummary.collections = 'PASS';
      results.collectionTest = {
        userMemoryExists: true,
        totalRecords: userMemoryTest.totalCount || 0
      };
    } catch (error) {
      results.testSummary.collections = 'FAIL';
      results.collectionError = error.message;
    }
    
    // Test AI integration
    try {
      const healthResponse = await fetch(TEST_CONFIG.SERVICES.HEALTH_CHECK, {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' }
      });
      
      results.testSummary.aiIntegration = healthResponse.ok ? 'PASS' : 'FAIL';
      results.aiServices = {
        vercelApp: healthResponse.ok ? 'operational' : 'degraded',
        statusCode: healthResponse.status
      };
    } catch (aiError) {
      results.testSummary.aiIntegration = 'FAIL';
      results.aiError = aiError.message;
    }
    
    return ok({
      success: true,
      ...results
    }, TEST_CONFIG.CORS_HEADERS);
    
  } catch (error) {
    return serverError({
      error: 'Master diagnostic failed',
      details: error.message,
      timestamp: new Date().toISOString()
    }, TEST_CONFIG.CORS_HEADERS);
  }
}

// üî• CORS OPTIONS HANDLERS
export function options_healthCheck(request) {
  return ok({ message: 'CORS OK - healthCheck' }, TEST_CONFIG.CORS_HEADERS);
}

export function options_testUser(request) {
  return ok({ message: 'CORS OK - testUser' }, TEST_CONFIG.CORS_HEADERS);
}

export function options_debugAllFunctions(request) {
  return ok({ message: 'CORS OK - debugAllFunctions' }, TEST_CONFIG.CORS_HEADERS);
}
