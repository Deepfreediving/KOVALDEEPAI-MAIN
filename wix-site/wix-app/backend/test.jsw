// ðŸ”¥ WIX APP BACKEND: HTTP-TEST.JSW - ENHANCED EDITION
// Lightweight testing endpoint with AI integration status
// Version: 4.0.0 - Production Ready
// Date: August 8, 2025

import { ok, serverError } from 'wix-http-functions';
import { fetch } from 'wix-fetch';

// ðŸŽ¯ TEST CONFIGURATION
const TEST_CONFIG = {
  SERVICES: {
    VERCEL_APP: 'https://kovaldeepai-main.vercel.app',
    HEALTH_CHECK: 'https://kovaldeepai-main.vercel.app/api/health'
  },
  CORS_HEADERS: {
    'Content-Type': 'application/json',
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
    'Access-Control-Allow-Headers': 'Content-Type, Authorization'
  }
};

// ðŸ”¥ HELPER FUNCTION FOR CONSISTENT RESPONSES
function createResponse(status, data) {
  return {
    status,
    body: data,
    headers: TEST_CONFIG.CORS_HEADERS
  };
}

// ðŸ”¥ ENHANCED GET TEST - Quick System Status
export async function get_test(request) {
  const startTime = Date.now();
  
  try {
    const version = request.query.version || 'basic';
    const includeAI = request.query.includeAI === 'true';
    
    const testResult = {
      status: 'operational',
      timestamp: new Date().toISOString(),
      environment: 'wix-backend',
      version: version,
      wixServices: {
        httpFunctions: 'available',
        dataQueries: 'ready',
        authentication: 'ready'
      }
    };
    
    // Enhanced testing for expert/optimized versions
    if (includeAI && version !== 'basic') {
      try {
        const healthResponse = await fetch(TEST_CONFIG.SERVICES.HEALTH_CHECK, {
          method: 'GET',
          headers: { 'Content-Type': 'application/json' }
        });
        
        testResult.aiIntegration = {
          vercelApp: healthResponse.ok ? 'operational' : 'degraded',
          openaiReady: healthResponse.ok,
          pineconeReady: healthResponse.ok,
          statusCode: healthResponse.status
        };
      } catch (aiError) {
        testResult.aiIntegration = {
          vercelApp: 'error',
          openaiReady: false,
          pineconeReady: false,
          error: aiError.message
        };
      }
    }
    
    const duration = Date.now() - startTime;
    testResult.performance = {
      responseTime: `${duration}ms`,
      efficient: duration < 1000
    };
    
    return createResponse(200, {
      success: true,
      ...testResult,
      message: 'Wix backend test successful'
    });
    
  } catch (error) {
    return createResponse(500, {
      success: false,
      status: 'error',
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
}

// ðŸ”¥ POST TEST - Enhanced with Payload Testing
export async function post_test(request) {
  const startTime = Date.now();
  
  try {
    const requestData = await request.body.json();
    const { testType = 'basic', data } = requestData;
    
    const testResult = {
      success: true,
      status: 'operational',
      testType: testType,
      timestamp: new Date().toISOString(),
      dataReceived: !!data,
      payloadSize: JSON.stringify(requestData).length
    };
    
    // Enhanced payload testing
    if (data) {
      testResult.dataValidation = {
        hasUserId: !!data.userId,
        hasMessage: !!data.message,
        hasProfile: !!data.profile,
        payloadValid: true
      };
    }
    
    const duration = Date.now() - startTime;
    testResult.performance = {
      responseTime: `${duration}ms`,
      efficient: duration < 500
    };
    
    return createResponse(200, {
      ...testResult,
      message: 'POST test successful'
    });
    
  } catch (error) {
    return createResponse(500, {
      success: false,
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
}

// ðŸ”¥ OPTIONS - CORS Support
export function options_test(request) {
  return createResponse(200, {
    message: 'CORS preflight successful',
    supportedMethods: ['GET', 'POST', 'OPTIONS'],
    testCapabilities: ['basic-connectivity', 'ai-integration', 'payload-validation']
  });
}

// ðŸ”¥ WRAPPER FUNCTIONS FOR DIRECT BACKEND CALLS
// These functions are called directly by the frontend using backend.test() etc.
export async function test(requestData) {
  // Create a mock request object that matches the HTTP function signature
  const mockRequest = {
    body: {
      json: () => Promise.resolve(requestData)
    },
    headers: {},
    query: {},
    method: 'POST'
  };
  
  // Call the main HTTP function and extract the response body
  const result = await post_test(mockRequest);
  return result.body || result;
}

// Wrapper for GET operations
export async function getTest(requestData) {
  const mockRequest = {
    body: { json: () => Promise.resolve({}) },
    headers: {},
    query: requestData || {},
    method: 'GET'
  };
  
  const result = await get_test(mockRequest);
  return result.body || result;
}

console.log("ðŸ”¥ Enhanced Test API initialized - AI integration ready");
