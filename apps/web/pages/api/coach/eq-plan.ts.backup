// EQ Planning API - Uses Daniel's methodology for dive planning
import { NextApiRequest, NextApiResponse } from 'next';
import { planEQ, KOVAL_CALIBRATION } from '../../../packages/core/src/eq-engine';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    // For now, skip auth and use request headers for user identification
    const userId = req.headers['x-user-id'] as string;
    
    // Extract planning inputs
    const {
      targetDepthM,
      fillDepthM,
      discipline = 'CWT',
      userLevel = 'L2',
      earSensitivity = 'medium',
      sinusStatus = 'clear',
      maxReversePackDepth
    } = req.body;

    if (!targetDepthM || targetDepthM <= 0) {
      return res.status(400).json({ error: 'Valid target depth required' });
    }

    // Generate EQ plan using Daniel's methodology
    const plan = planEQ({
      targetDepthM,
      fillDepthM,
      discipline,
      userLevel,
      earSensitivity,
      sinusStatus,
      maxReversePackDepth,
      // Use Daniel's calibration as defaults
      earMl: KOVAL_CALIBRATION.EAR_VOLUME_ML,
      sinusMl: KOVAL_CALIBRATION.SINUS_VOLUME_ML,
      descentRateMps: KOVAL_CALIBRATION.DESCENT_RATE_MPS
    });

    // Format response for UI consumption
    const response = {
      success: true,
      plan: {
        ...plan,
        summary: {
          targetDepth: `${targetDepthM}m`,
          totalEqualizations: plan.totalEqCount,
          mouthfillRecommendation: plan.mouthfillDepthM > 0 ? 
            `Take ${plan.mouthfillActualMl}ml mouthfill at ${plan.mouthfillDepthM}m` :
            'No mouthfill required',
          maxPotential: plan.maxPotentialDepthM > 0 ? 
            `Theoretical max: ${plan.maxPotentialDepthM}m (${plan.mouthfillMultiplier}x multiplier)` :
            null
        },
        cadenceTable: plan.cadenceBands.map(band => ({
          depth: band.band,
          technique: band.technique,
          frequency: `Every ${band.strideM}m`,
          count: `${band.eqCount} EQs`,
          description: band.description
        })),
        safetyChecks: {
          riskFlags: plan.riskFlags,
          plateauWarnings: plan.plateauWarnings,
          warnings: plan.warnings
        },
        coachingNotes: plan.notes
      },
      metadata: {
        methodology: "Daniel Koval's depth Ã— volume theory",
        rvDepthEstimate: plan.rvDepthEstimate,
        generatedAt: new Date().toISOString()
      }
    };

    res.status(200).json(response);

  } catch (error) {
    console.error('EQ planning error:', error);
    res.status(500).json({ 
      error: 'Failed to generate EQ plan',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
}
