// ===== üìÑ Wix App/backend/http-memberProfile.jsw =====
// HTTP endpoint to fetch complete member profile data from Members/FullData

import { getJSON, ok, notFound, serverError, badRequest } from 'wix-http-functions';
import wixData from 'wix-data';

// ‚úÖ Inline constants to avoid import issues
const COLLECTIONS = {
    USER_MEMORY: "@deepfreediving/kovaldeepai-app/Import1",
    REGISTRATIONS: "KovalAIRegistrations", 
    MEMBERS: "Members/FullData"
};

const LIMITS = {
    MAX_RESULTS: 100,
    MAX_MEMORY_ENTRIES: 1000,
    MAX_DIVE_LOGS: 500,
    MAX_MESSAGE_LENGTH: 10000,
    MAX_SEARCH_RESULTS: 50
};

export async function get_memberProfile(request) {
  try {
    console.log('üìä Fetching member profile data...');
    
    const query = request.query;
    const userId = query.userId || query.memberId;
    
    if (!userId) {
      console.warn('‚ö†Ô∏è Missing userId parameter');
      return badRequest({ 
        error: 'userId parameter is required',
        success: false 
      });
    }

    console.log(`üîç Loading profile for member: ${userId}`);

    // ‚úÖ Query Members/FullData collection for complete profile
    const profileResults = await wixData.query(COLLECTIONS.MEMBERS)
      .eq('_id', userId)  // Match by member ID
      .limit(1)
      .find();

    let memberProfile = null;
    
    if (profileResults.items.length > 0) {
      const profile = profileResults.items[0];
      console.log(`‚úÖ Found member profile: ${profile.nickname || profile.firstName || 'Unknown'}`);
      
      memberProfile = {
        memberId: profile._id,
        loginEmail: profile.loginEmail,
        nickname: profile.nickname || profile.firstName || profile.displayName,
        firstName: profile.firstName,
        lastName: profile.lastName,
        displayName: profile.nickname || `${profile.firstName || ''} ${profile.lastName || ''}`.trim() || profile.loginEmail?.split('@')[0] || 'Member',
        profilePhoto: profile.profilePhoto,
        coverPhoto: profile.coverPhoto,
        about: profile.about,
        activityStatus: profile.activityStatus,
        lastLoginDate: profile.lastLoginDate,
        slug: profile.slug,
        contactId: profile.contactId,
        phone: profile.phone,
        updatedDate: profile._updatedDate,
        isActive: profile.activityStatus === 'ACTIVE'
      };
      
      console.log(`üìä Profile data assembled:`, {
        memberId: memberProfile.memberId,
        displayName: memberProfile.displayName,
        email: memberProfile.loginEmail,
        hasPhoto: !!memberProfile.profilePhoto,
        isActive: memberProfile.isActive
      });
      
    } else {
      console.log(`‚ö†Ô∏è No profile found for member: ${userId}`);
      // Return minimal profile data
      memberProfile = {
        memberId: userId,
        displayName: 'Member',
        nickname: 'Diver',
        loginEmail: 'unknown@email.com',
        isActive: false
      };
    }

    return ok({
      success: true,
      profile: memberProfile,
      memberId: userId,
      source: 'Members/FullData',
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå Error fetching member profile:', error);
    return serverError({
      success: false,
      error: 'Failed to fetch member profile',
      details: error.message,
      timestamp: new Date().toISOString()
    });
  }
}

// ‚úÖ POST method for future use (updates, etc.)
export async function post_memberProfile(request) {
  return badRequest({
    success: false,
    error: 'POST method not implemented yet',
    message: 'Use GET to retrieve member profile data'
  });
}
