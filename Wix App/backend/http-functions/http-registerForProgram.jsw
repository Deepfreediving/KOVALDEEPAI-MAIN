// ===== üìù http-registerForProgram.jsw - User Registration Function =====
// HTTP Endpoint: /_functions/registerForProgram
// This backend function handles user registration for Koval AI program

import { currentMember } from 'wix-members';
import wixData from 'wix-data';

// ‚úÖ Inline constants to avoid import issues
const COLLECTIONS = {
    REGISTRATIONS: "KovalAIRegistrations", 
    USER_MEMORY: "@deepfreediving/kovaldeepai-app/Import1"
};

const CORS_HEADERS = {
    'Content-Type': 'application/json',
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
    'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Requested-With',
    'Access-Control-Max-Age': '86400'
};

/**
 * ‚úÖ Register user for Koval AI program
 * You can customize this based on your registration flow
 */
async function registerUserForKovalAI(userData) {
    console.log('üìù Registering user for Koval AI:', userData);
    
    try {
        const member = await currentMember.getMember();
        
        if (!member) {
            throw new Error('User must be logged in to register');
        }
        
        // Check if user is already registered
        const existingRegistration = await wixData.query(COLLECTIONS.REGISTRATIONS)
            .eq("userId", member._id)
            .or(
                wixData.query(COLLECTIONS.REGISTRATIONS).eq("email", member.loginEmail)
            )
            .find();
        
        if (existingRegistration.items && existingRegistration.items.length > 0) {
            console.log('‚úÖ User already registered, updating existing registration');
            
            const existing = existingRegistration.items[0];
            const updatedData = {
                ...existing,
                status: 'active',
                hasAccess: true,
                lastUpdated: new Date(),
                registrationSource: userData.source || 'wix-widget-update'
            };
            
            const result = await wixData.update(COLLECTIONS.REGISTRATIONS, updatedData);
            return {
                success: true,
                registration: result,
                message: 'Registration updated successfully!',
                isUpdate: true
            };
        }
        
        const registrationData = {
            userId: member._id,
            email: member.loginEmail,
            displayName: userData.displayName || member.profile?.nickname || member.profile?.firstName,
            plan: userData.plan || 'basic',
            status: 'active',
            isPaid: userData.isPaid || false,
            hasAccess: true,
            accessLevel: userData.accessLevel || 'standard',
            registrationSource: userData.source || 'wix-widget',
            registrationDate: new Date(),
            _createdDate: new Date()
        };
        
        // Add to your registration collection
        const result = await wixData.insert(COLLECTIONS.REGISTRATIONS, registrationData);
        console.log('‚úÖ User registered successfully:', result);
        
        return {
            success: true,
            registration: result,
            message: 'Successfully registered for Koval AI!',
            isUpdate: false
        };
        
    } catch (error) {
        console.error('‚ùå Registration error:', error);
        throw error;
    }
}

/**
 * ‚úÖ HTTP POST endpoint for user registration
 * Maps to: /_functions/registerForProgram
 */
export async function post_registerForProgram(request) {
    console.log('üåê HTTP registration request received');
    
    try {
        const userData = await request.body.json();
        const result = await registerUserForKovalAI(userData);
        
        return {
            status: 200,
            headers: CORS_HEADERS,
            body: JSON.stringify({
                success: true,
                ...result
            })
        };
    } catch (error) {
        console.error('‚ùå HTTP registration error:', error);
        
        return {
            status: 500,
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                success: false,
                error: error.message,
                message: 'Registration failed. Please try again or contact support.'
            })
        };
    }
}

/**
 * ‚úÖ Handle OPTIONS requests for CORS
 */
export async function options_registerForProgram(request) {
    return {
        status: 200,
        headers: CORS_HEADERS
    };
}
