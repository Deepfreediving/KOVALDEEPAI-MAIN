// WIX APP BACKEND: CHAT.JSW - MASTER EDITION
// Chat API endpoint for Wix App environment
// Version: 4.0.0 - Production Ready

import { ok, badRequest, serverError } from 'wix-http-functions';
import { fetch } from 'wix-fetch';
import { authentication } from 'wix-members-backend';

// ðŸŽ¯ MASTER CHAT CONFIGURATION
const CHAT_CONFIG = {
  API_ENDPOINTS: {
    AI_BACKEND: 'https://kovaldeepai-main.vercel.app/api/openai/chat',
    FALLBACK_BACKEND: 'https://kovaldeepai-main.vercel.app/api/chat'
  },
  
  VALIDATION: {
    MAX_MESSAGE_LENGTH: 5000,
    MIN_MESSAGE_LENGTH: 1
  },
  
  PERFORMANCE: {
    REQUEST_TIMEOUT: 15000,
    RETRY_ATTEMPTS: 2
  },
  
  CORS_HEADERS: {
    'Content-Type': 'application/json',
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
    'Access-Control-Allow-Headers': 'Content-Type, Authorization'
  }
};

// ðŸ”¥ MAIN CHAT ENDPOINT
export async function post_chat(request) {
  const startTime = Date.now();
  
  try {
    // Parse request body
    let requestData;
    try {
      requestData = await request.body.json();
    } catch (error) {
      return badRequest({
        error: 'Invalid JSON in request body',
        headers: CHAT_CONFIG.CORS_HEADERS
      });
    }

    // Validate message
    const { message, userId, sessionId } = requestData;
    
    if (!message || typeof message !== 'string') {
      return badRequest({
        error: 'Message is required and must be a string',
        headers: CHAT_CONFIG.CORS_HEADERS
      });
    }

    if (message.length < CHAT_CONFIG.VALIDATION.MIN_MESSAGE_LENGTH) {
      return badRequest({
        error: 'Message too short',
        headers: CHAT_CONFIG.CORS_HEADERS
      });
    }

    if (message.length > CHAT_CONFIG.VALIDATION.MAX_MESSAGE_LENGTH) {
      return badRequest({
        error: 'Message too long',
        headers: CHAT_CONFIG.CORS_HEADERS
      });
    }

    // Get current member if available
    let member = null;
    try {
      member = await authentication.getCurrentMember();
    } catch (error) {
      console.log('No authenticated member available');
    }

    // Prepare request for AI backend
    const aiRequest = {
      message: message.trim(),
      userId: userId || (member ? member._id : 'anonymous'),
      sessionId: sessionId || 'wix-app-session',
      source: 'wix-app',
      timestamp: new Date().toISOString()
    };

    // Call AI backend
    const aiResponse = await fetch(CHAT_CONFIG.API_ENDPOINTS.FALLBACK_BACKEND, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(aiRequest)
    });

    if (!aiResponse.ok) {
      console.error(`AI backend error: ${aiResponse.status}`);
      throw new Error(`AI backend returned ${aiResponse.status}`);
    }

    const aiData = await aiResponse.json();
    
    const duration = Date.now() - startTime;
    console.log(`Chat request completed in ${duration}ms`);

    return ok({
      ...aiData,
      metadata: {
        processingTime: duration,
        source: 'wix-app-backend',
        timestamp: new Date().toISOString()
      }
    }, CHAT_CONFIG.CORS_HEADERS);

  } catch (error) {
    console.error('Chat endpoint error:', error);
    
    return serverError({
      error: 'Chat service temporarily unavailable',
      details: error.message,
      timestamp: new Date().toISOString()
    }, CHAT_CONFIG.CORS_HEADERS);
  }
}

// ðŸ”¥ OPTIONS HANDLER (CORS)
export function options_chat(request) {
  return ok({
    message: 'CORS preflight OK'
  }, CHAT_CONFIG.CORS_HEADERS);
}

// ðŸ”¥ GET HANDLER (Status Check)
export function get_chat(request) {
  return ok({
    status: 'operational',
    service: 'wix-app-chat',
    timestamp: new Date().toISOString(),
    endpoints: ['POST /chat', 'OPTIONS /chat'],
    version: '4.0.0'
  }, CHAT_CONFIG.CORS_HEADERS);
}
