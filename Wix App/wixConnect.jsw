import { fetch } from 'wix-fetch';
import wixData from 'wix-data';

// ✅ Direct constants to avoid import issues
const USER_MEMORY_COLLECTION = "@deepfreediving/kovaldeepai-app/Import1";
const AI_BACKEND_URL = "https://kovaldeepai-main.vercel.app/api/chat-embed";

/**
 * ✅ Safe JSON parsing utility
 */
async function safeJsonParse(response) {
    const text = await response.text();
    try {
        return JSON.parse(text);
    } catch (err) {
        console.error("❌ Failed to parse JSON:", text);
        return {};
    }
}

/**
 * ✅ Save a new dive log to the user memory collection
 */
export async function saveDiveLog(diveData) {
    try {
        return await wixData.insert(USER_MEMORY_COLLECTION, diveData);
    } catch (error) {
        console.error("❌ Error saving dive log:", error);
        throw new Error("Could not save dive log");
    }
}

/**
 * ✅ Retrieve all dive logs for a specific user
 */
export async function getDiveLogs(userId) {
    try {
        const results = await wixData.query(USER_MEMORY_COLLECTION)
            .eq("userId", userId)
            .find();
        return results.items || [];
    } catch (error) {
        console.error("❌ Error fetching dive logs:", error);
        return [];
    }
}

/**
 * ✅ Save AI memory snapshots (context, last logs, profile updates)
 */
export async function saveUserMemory(userId, memoryUpdate) {
    try {
        return await wixData.insert(USER_MEMORY_COLLECTION, {
            userId,
            type: "memory",
            timestamp: new Date().toISOString(),
            ...memoryUpdate
        });
    } catch (error) {
        console.error("❌ Error saving user memory:", error);
        return null;
    }
}

/**
 * ✅ Test connection to external AI backend
 * Note: For chat functionality, use http-chat.jsw endpoint instead
 */
export async function testAIConnection() {
    try {
        const response = await fetch(AI_BACKEND_URL, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
                message: "test connection",
                userId: "test-user",
                profile: { nickname: "Test User" }
            })
        });

        const data = await safeJsonParse(response);
        
        return {
            connected: response.ok,
            status: response.status,
            response: data,
            timestamp: new Date().toISOString()
        };
    } catch (error) {
        return {
            connected: false,
            error: error.message,
            timestamp: new Date().toISOString()
        };
    }
}
