// ===== üîê checkUserAccess.jsw - User Registration Verification =====
// This backend function verifies if a user has access to your Koval AI program

import { currentMember } from 'wix-members';
import wixData from 'wix-data';

// ‚úÖ Inline constants to avoid import issues
const COLLECTIONS = {
    USER_MEMORY: "@deepfreediving/kovaldeepai-app/Import1",
    REGISTRATIONS: "KovalAIRegistrations", 
    MEMBERS: "Members/FullData"
};

const CORS_HEADERS = {
    'Content-Type': 'application/json',
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
    'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Requested-With',
    'Access-Control-Max-Age': '86400'
};

const ACCESS_LEVELS = {
    GUEST: 'guest',
    STANDARD: 'standard', 
    PREMIUM: 'premium',
    ADMIN: 'admin'
};

/**
 * ‚úÖ Check if user has paid/registered access to Koval AI
 * This integrates with your Wix registration/payment system
 */
export async function checkUserAccess(userId, userEmail) {
    console.log('üîç Checking access for user:', userId, userEmail);
    
    try {
        // Method 1: Check current member status
        const member = await currentMember.getMember();
        console.log('üë§ Current member:', member);
        
        if (!member || !member.loginEmail) {
            console.log('‚ùå No authenticated member found');
            return {
                hasAccess: false,
                reason: 'not_authenticated',
                message: 'Please log in to access Koval AI'
            };
        }
        
        // Method 2: Check if user is in your registration database
        // Replace 'KovalAIRegistrations' with your actual collection name
        const registrationQuery = await wixData.query(COLLECTIONS.REGISTRATIONS)
            .eq("userId", member._id)
            .or(
                wixData.query("KovalAIRegistrations").eq("email", member.loginEmail)
            )
            .find();
        
        console.log('üìã Registration query result:', registrationQuery);
        
        if (registrationQuery.items && registrationQuery.items.length > 0) {
            const registration = registrationQuery.items[0];
            console.log('‚úÖ Found user registration:', registration);
            
            // Check if registration is active
            const isActive = registration.status === 'active' || 
                           registration.isPaid === true ||
                           registration.hasAccess === true;
            
            if (isActive) {
                return {
                    hasAccess: true,
                    accessLevel: registration.accessLevel || 'standard',
                    registrationDate: registration._createdDate,
                    expiryDate: registration.expiryDate,
                    plan: registration.plan || 'basic',
                    user: {
                        id: member._id,
                        email: member.loginEmail,
                        displayName: member.profile?.nickname || member.profile?.firstName
                    }
                };
            } else {
                console.log('‚ùå User registration found but inactive');
                return {
                    hasAccess: false,
                    reason: 'inactive_registration',
                    message: 'Your registration is inactive. Please contact support.',
                    registrationFound: true
                };
            }
        }
        
        // Method 3: Check Wix Paid Plans (if you're using Wix Pricing Plans)
        try {
            // This would require importing wix-pricing-plans if you're using that
            // const { currentMember } = await import('wix-pricing-plans');
            // const memberPlans = await currentMember.getCurrentMemberOrders();
            // Check if user has active paid plan
        } catch (planError) {
            console.log('‚ö†Ô∏è Paid plans check skipped:', planError.message);
        }
        
        // Method 4: Fallback - check member roles/groups
        if (member.profile && member.profile.members) {
            const memberGroups = member.profile.members.groups || [];
            const hasKovalAccess = memberGroups.some(group => 
                group.toLowerCase().includes('koval') || 
                group.toLowerCase().includes('ai') ||
                group.toLowerCase().includes('premium')
            );
            
            if (hasKovalAccess) {
                console.log('‚úÖ Access granted via member group');
                return {
                    hasAccess: true,
                    accessLevel: 'group_member',
                    source: 'member_group'
                };
            }
        }
        
        console.log('‚ùå No access found for user');
        return {
            hasAccess: false,
            reason: 'no_registration',
            message: 'Please register for Koval AI to access the chat.',
            registrationUrl: '/register-koval-ai' // Your registration page
        };
        
    } catch (error) {
        console.error('‚ùå Access check error:', error);
        
        // In case of error, you might want to grant access or deny it
        // For now, let's be permissive and allow access with a warning
        return {
            hasAccess: true, // or false, depending on your preference
            accessLevel: 'error_fallback',
            error: error.message,
            message: 'Unable to verify access. Contact support if issues persist.'
        };
    }
}

/**
 * ‚úÖ HTTP endpoint for access verification
 */
export async function post_checkUserAccess(request) {
    console.log('üåê HTTP access check request received');
    
    try {
        const { userId, userEmail } = await request.body.json();
        const result = await checkUserAccess(userId, userEmail);            return {
                status: 200,
                headers: CORS_HEADERS,
                body: JSON.stringify({
                    success: true,
                    ...result
                })
            };
    } catch (error) {
        console.error('‚ùå HTTP access check error:', error);
        
        return {
            status: 500,
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                success: false,
                hasAccess: false,
                error: error.message
            })
        };
    }
}

/**
 * ‚úÖ Handle OPTIONS requests for CORS
 */
export async function options_checkUserAccess(request) {        return {
            status: 200,
            headers: CORS_HEADERS
        };
}

/**
 * ‚úÖ Register user for Koval AI (example function)
 * You can customize this based on your registration flow
 */
export async function registerUserForKovalAI(userData) {
    console.log('üìù Registering user for Koval AI:', userData);
    
    try {
        const member = await currentMember.getMember();
        
        if (!member) {
            throw new Error('User must be logged in to register');
        }
        
        const registrationData = {
            userId: member._id,
            email: member.loginEmail,
            displayName: userData.displayName || member.profile?.nickname,
            plan: userData.plan || 'basic',
            status: 'active',
            isPaid: userData.isPaid || false,
            hasAccess: true,
            accessLevel: userData.accessLevel || 'standard',
            registrationSource: userData.source || 'wix-widget',
            _createdDate: new Date()
        };
        
        // Add to your registration collection
        const result = await wixData.insert(COLLECTIONS.REGISTRATIONS, registrationData);
        console.log('‚úÖ User registered successfully:', result);
        
        return {
            success: true,
            registration: result,
            message: 'Successfully registered for Koval AI!'
        };
        
    } catch (error) {
        console.error('‚ùå Registration error:', error);
        throw error;
    }
}
