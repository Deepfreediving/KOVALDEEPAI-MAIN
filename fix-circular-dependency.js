// üö® FIX FOR "Cannot access 'em' before initialization" ERROR// This script specifically addresses the circular dependency issue in the embed pageconsole.log('üîß Applying circular dependency fix...');// ===== IDENTIFY THE ISSUE =====// The error "Cannot access 'em' before initialization" typically occurs when:// 1. A variable is used before it's declared (temporal dead zone)// 2. Circular dependencies between modules// 3. Hoisting issues with let/const declarations// ===== FIX 1: SAFE MODULE LOADING =====function createSafeModuleLoader() {  if (typeof window === 'undefined') return;    const moduleRegistry = new Map();  const loadingModules = new Set();    window.safeRequire = function(moduleName) {    // Prevent circular dependencies    if (loadingModules.has(moduleName)) {      console.warn(`‚ö†Ô∏è Circular dependency detected for module: ${moduleName}`);      return null;    }        loadingModules.add(moduleName);        try {      const module = require(moduleName);      moduleRegistry.set(moduleName, module);      loadingModules.delete(moduleName);      return module;    } catch (error) {      console.error(`‚ùå Failed to load module ${moduleName}:`, error);      loadingModules.delete(moduleName);      return null;    }  };}// ===== FIX 2: VARIABLE INITIALIZATION ORDER =====function fixVariableInitialization() {  // Override potential problematic global variables  if (typeof window !== 'undefined') {    // Ensure 'em' is safely initialized if it exists    if (typeof window.em === 'undefined') {      window.em = null; // Safe default    }        // Prevent temporal dead zone issues    ['em', 'ec', 'globalThis', 'global'].forEach(varName => {      if (typeof window[varName] === 'undefined') {        try {          window[varName] = null;        } catch (e) {          // Ignore if already defined        }      }    });  }}// ===== FIX 3: SAFE COMPONENT MOUNTING =====function createSafeComponentMount() {  if (typeof window === 'undefined') return;    const originalCreateElement = window.React?.createElement;    if (originalCreateElement) {    window.React.createElement = function() {      try {        return originalCreateElement.apply(this, arguments);      } catch (error) {        console.error('üö® React createElement error:', error);        // Return a safe fallback element        return originalCreateElement('div', { className: 'error-boundary' }, 'Component failed to render');      }    };  }}// ===== FIX 4: PREVENT INITIALIZATION ERRORS =====function preventInitializationErrors() {  // Wrap common problematic operations  const originalAddEventListener = window.addEventListener;    if (originalAddEventListener) {    window.addEventListener = function(type, listener, options) {      try {        return originalAddEventListener.call(this, type, listener, options);      } catch (error) {        console.warn('‚ö†Ô∏è Event listener error prevented:', error.message);      }    };  }}// ===== FIX 5: SAFE ERROR RECOVERY =====function setupErrorRecovery() {  if (typeof window === 'undefined') return;    // Global error handler  window.addEventListener('error', (event) => {    console.error('üö® Global error caught:', event.error);        // If it's the 'em' initialization error, try to recover    if (event.error?.message?.includes('Cannot access') && event.error?.message?.includes('before initialization')) {      console.log('üîß Attempting to recover from initialization error...');            // Force re-initialization of problematic variables      setTimeout(() => {        try {          fixVariableInitialization();          console.log('‚úÖ Variable re-initialization complete');        } catch (recoveryError) {          console.error('‚ùå Recovery failed:', recoveryError);        }      }, 100);    }        // Prevent the error from breaking the app    event.preventDefault();    return false;  });    // Unhandled promise rejection handler  window.addEventListener('unhandledrejection', (event) => {    console.error('üö® Unhandled promise rejection:', event.reason);        // Check if it's related to the 'em' error    if (event.reason?.message?.includes('Cannot access')) {      console.log('üîß Recovering from promise rejection...');      event.preventDefault();      return false;    }  });}// ===== FIX 6: DEFER PROBLEMATIC OPERATIONS =====function deferProblematicOperations() {  if (typeof window === 'undefined') return;    // Defer any operations that might cause initialization issues  const safeDefer = (callback) => {    if (document.readyState === 'loading') {      document.addEventListener('DOMContentLoaded', callback);    } else {      setTimeout(callback, 0);    }  };    window.safeDefer = safeDefer;}// ===== APPLY ALL FIXES =====function applyCircularDependencyFixes() {  console.log('üîß Applying circular dependency fixes...');    try {    createSafeModuleLoader();    fixVariableInitialization();    createSafeComponentMount();    preventInitializationErrors();    setupErrorRecovery();    deferProblematicOperations();        console.log('‚úÖ Circular dependency fixes applied');  } catch (error) {    console.error('‚ùå Failed to apply fixes:', error);  }}// Auto-apply fixes immediatelyapplyCircularDependencyFixes();// Also apply when DOM is readyif (typeof window !== 'undefined') {  if (document.readyState === 'loading') {    document.addEventListener('DOMContentLoaded', applyCircularDependencyFixes);  } else {    setTimeout(applyCircularDependencyFixes, 0);  }}console.log('‚úÖ Circular dependency fix script loaded');